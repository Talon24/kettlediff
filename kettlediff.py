#!/usr/bin/python
"""Module to normalize .ktr and .kjb files.

When using PDI, it is possible for certain XML tags (like hops and steps) that
their order in the .ktr/.kjb file changes which can obfuscate the git diff.
This module shall order the elements of the XML that are potentially altered
so that the diff only shows actual changes rather than moved XML blocks.

This module can also be used for .prpt files from Pentaho Report Designer.

Instructions to use this module with git:

Add the following to "~/.gitconfig":
[diff "kettle"]
	textconv = /path/to/this/kettlediff.py
	xfuncname = <name>(.*)</name>|<order>|<hops>
[diff "prpt"]
	textconv = /path/to/this/kettlediff.py
	xfuncname = .*name=.*

To set a global attributes file for your user rather than editing
the attributes for all of your projects, also add
[core]
	attributesfile = /path/to/your/file

At that attributes file or the projects attributes file, add the following:
*.ktr diff=kettle
*.kbj diff=kettle
*.prpt diff=prpt

"""

from __future__ import print_function

import re
# import os
import sys
import difflib
import zipfile
from xml.dom import minidom

# if "lxml" in sys.modules:
try:
    import lxml.etree as ET
except ImportError:
    import xml.etree.ElementTree as ET

try:
    import colorama
    colorama.init(convert=True)
except ImportError:
    pass

__author__ = "Jan Synwoldt"
__license__ = "MIT"
__version__ = "0.9.5"
__maintainer__ = "Jan Synwoldt"
__email__ = "j.synwoldt@googlemail.com"
__status__ = "Production"

SEP = "\n"  # os.linesep might be useful, but in default settings git will protest


def caseless(my_input):
    """Use .casefold() if python3, fallback to .lower() if python2.
    Also casts the function input to string."""
    if sys.version_info >= (3, 3):  # pylint: disable=no-else-return
        return str(my_input).casefold()
    else:
        return str(my_input).lower()


def xml_element_key(element):
    """Use for sorting tree elements, use the name content if ambiguous."""
    multiples = ("connection", "step", "entries")
    if element.tag in multiples:  # pylint: disable=no-else-return
        return "■" + caseless(element.tag) + caseless(element[0].text)
        # box (■) is a late ascii char to sort these Elements on end
        # Also unlikely to be included in node names and therefore edge names
    else:
        return caseless(element.tag)


def hop_key(hop):
    """Generate name for hops."""
    text = hop.find("from").text + " ■ ■ " + hop.find("to").text
    return caseless(text)


def hop_element_idx(lst):
    """Search through list, find index of Element with tag 'order' or 'hops'."""
    for idx, element in enumerate(lst):
        if element.tag == "order" or element.tag == "hops":
            return idx
    return None


def data_cleaning(data):
    """Fixing known differences in input files that are caused by differing
    versions of pdi but don't result in functional changing of the file."""
    # Issue: Changing whitespaces on empty tags
    data = re.sub(r"<([^>]*)>\r?\n?\s*</\1>", r"<\1> </\1>", data)

    # Issue: Some fields may be set to default values? Remove val if default
    data = re.sub(r"(<field>[\r\n\s]*<name>.*</name>)[\r\n\s]*<rename/>[\r\n\s]*" +
                  r"<length>-2</length>[\r\n\s]*<precision>-2</precision>", r"\1", data)
    data = re.sub(r"(</case_sensitive>)\r?\n\s*<collator_enabled>N</collator_enabled>" +
                  r"\r?\n\s*<collator_strength>2</collator_strength>" +
                  r"(\r?\n\s*<presorted>)", r"\1\2", data)
    data = re.sub(r"(</output_file_field>)\r?\n\s*<create_parent_folder>N" +
                  r"</create_parent_folder>(\r?\n\s*<parameters>)", r"\1\2", data)
    data = re.sub(r"(</logging_remote_work>|</pass_export>)\r?\n\s*" +
                  r"<run_configuration/>(\r?\n\s*<parameters>)", r"\1\2", data)

    return data


def kettlediff(arg):
    """Parse XML file generated by Pentaho Data Integration.
    Returns sorted XML file to stdout."""
    xmltree = ET.parse(arg).getroot()
    title = xmltree.tag
    old = list(xmltree)

    # Find the hop element, sort the hops and insert the sorted hops back in
    hops_idx = hop_element_idx(old)  # Get index of Element that contains edges
    if hops_idx is not None:  # Sort sublist of hops and write back into list
        hops = sorted(old[hops_idx], key=hop_key)
        hop_element = ET.Element(old[hops_idx].tag)  # Make empty edges Element
        for element in hops:
            hop_element.append(element)  # Insert edges in correct order
        old[hops_idx] = hop_element  # Replace edges Element

    old.sort(key=xml_element_key)  # Sort first level by tag or by <name>-field

    new = ET.Element(title)  # Make head Element
    for element in old:
        new.append(element)  # Insert Elements in correct order

    # Cast Element Tree to string
    xml = ET.tostring(new, encoding="utf-8", method="xml")
    xml = minidom.parseString(xml).toprettyxml(indent=" " * 4, newl=SEP)

    # Remove empty lines
    result = "".join([line for line in xml.splitlines(True) if line.strip()])

    return data_cleaning(result)


def prddiff(arg):
    """Textify the .prpt files from Pentaho Report Designer
        and return to stdout.
    Mimes the behaviour of:                    zipgrep -e '*'
    That will probably be faster, but this way zipgrep does not
    need to be installed (possibly requires root access)."""
    result = []  # To avoid continuous printing
    with zipfile.ZipFile(arg, 'r') as zipref:  # Unzip
        for file in zipref.namelist():  # Path of all files in archive
            if file.endswith("/"):  # Skip folders
                continue
            try:
                for fileline in zipref.open(file):
                    result.append("%s: %s" % (file, fileline.decode("utf-8")))
            except UnicodeDecodeError:
                result.append("%s: >> Binary File <<%s" % (file, SEP))
    return "".join(result)


def colordiff(path1, path2):
    """Can be used as replacement for git diff if necessary. To be used if no
       git is available, e.g. when used with subversion."""
    def colorline(line):
        """color the lines if possible"""
        if "colorama" in sys.modules:
            if line.startswith(" "):  # No Change
                return line
            elif line.startswith("+"):  # Added
                return colorama.Fore.GREEN + line + colorama.Style.RESET_ALL
            elif line.startswith("-"):  # Removed
                return colorama.Fore.RED + line + colorama.Style.RESET_ALL
            elif line.startswith("@"):  # Header
                return colorama.Fore.CYAN + line + colorama.Style.RESET_ALL
        return line

    lines = [colorline(line) for line in difflib.unified_diff(
        main(path1).splitlines(),
        main(path2).splitlines(),
        fromfile=path1, tofile=path2)]
    return SEP.join(lines)


def main(path):
    """Decide how to handle the input file."""
    if path.lower().endswith("ktr") or path.lower().endswith("kjb"):
        return kettlediff(path)  # Pentaho Data Integration
    elif path.lower().endswith("prpt"):
        return prddiff(path)  # Pentaho Report Designer
    else:
        raise IOError("This program does not support files with this extension")


if __name__ == '__main__':
    if len(sys.argv) == 2:
        print(main(sys.argv[1]))
    elif len(sys.argv) == 3:
        print(colordiff(sys.argv[1], sys.argv[2]))
    else:
        raise IndexError("Wrong amount of arguments. Expected 1 or 2.")
